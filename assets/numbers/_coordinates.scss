@function sg-polar-to-cartesian($distance, $angle) {
  @if function-exists('sin') == false {
    @error 'Could not find sin()! Please make sure all dependencies are met. See https://github.com/devatrox/Sunglass/ for more info.';
  }
  @if function-exists('cos') == false {
    @error 'Could not find cos()! Please make sure all dependencies are met. See https://github.com/devatrox/Sunglass/ for more info.';
  }

  @if type-of($angle) != number {
    @error '$angle NaN';
  }
  @if type-of($distance) != number {
    @error '$distance NaN';
  }
  @if unit($angle) == 'deg' {
    @if function-exists('deg-to-rad') {
      $angle: deg-to-rad($angle);
    }
    @else {
      @error 'Could not find deg-to-rad()! Please make sure all dependencies are met. See https://github.com/devatrox/Sunglass/ for more info.';
    }
  }
  @if unit($angle) != 'rad' {
    @error '$angle unit must be "deg" or "rad"';
  }

  $x: sg-strip-unit($distance) * cos($angle);
  $x: if($x == 0, $x, sg-add-unit($x, unit($distance)));

  $y: sg-strip-unit($distance) * sin($angle);
  $y: if($y == 0, $y, sg-add-unit($y, unit($distance)));

  @return $x $y;
}

@function sg-coordinates($distance, $angle) {
  $coords: sg-polar-to-cartesian($distance, $angle);
  // invert the Y-axis because CSS works different
  $coords: nth($coords, 1) sg-inverse(nth($coords, 2));

  @return $coords;
}

@function sg-coords($distance, $angle) {
  @return sg-coordinates($distance, $angle);
}
