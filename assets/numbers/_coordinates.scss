////
/// @group Numbers
////

/// Return cartesian coordinates
/// @name polar-to-cartesian
///
/// @param {Number} $distance
/// @param {Number} $angle
///
/// @return {List}
///
/// @require strip-unit
/// @require add-unit
/// @require {function} Math::deg-to-rad
/// @require {function} Math::cos
/// @require {function} Math::sin
///
/// @link https://github.com/terkel/mathsass mathsass
/// @link https://github.com/at-import/Sassy-math Sassy-math
///
/// @example
///  polar-to-cartesian(5px, 90deg)
///  // 0 5px

@function sg-polar-to-cartesian($distance, $angle) {
  @if function-exists('sin') == false {
    @error 'Could not find sin()! Please make sure all dependencies are met. See https://github.com/devatrox/Sunglass/ for more info.';
  }
  @if function-exists('cos') == false {
    @error 'Could not find cos()! Please make sure all dependencies are met. See https://github.com/devatrox/Sunglass/ for more info.';
  }

  @if type-of($angle) != number {
    @error '$angle NaN';
  }
  @if type-of($distance) != number {
    @error '$distance NaN';
  }
  @if unit($angle) == 'deg' {
    @if function-exists('deg-to-rad') {
      $angle: deg-to-rad($angle);
    }
    @else {
      @error 'Could not find deg-to-rad()! Please make sure all dependencies are met. See https://github.com/devatrox/Sunglass/ for more info.';
    }
  }
  @if unit($angle) != 'rad' {
    @error '$angle unit must be "deg" or "rad"';
  }

  $x: sg-strip-unit($distance) * cos($angle);
  $x: if($x == 0, $x, sg-add-unit($x, unit($distance)));

  $y: sg-strip-unit($distance) * sin($angle);
  $y: if($y == 0, $y, sg-add-unit($y, unit($distance)));

  @return $x $y;
}

/// Return cartesian coordinates in CSS-format (by inverting the Y-axis)
/// @name coordinates
///
/// @param {Number} $distance
/// @param {Number} $angle
///
/// @return {List}
///
/// @require polar-to-cartesian
/// @require inverse
///
/// @example
///  coordinates(5px, 90deg)
///  // 0 -5px

@function sg-coordinates($distance, $angle) {
  $coords: sg-polar-to-cartesian($distance, $angle);
  // invert the Y-axis because CSS works different
  $coords: nth($coords, 1) sg-inverse(nth($coords, 2));

  @return $coords;
}


/// @name coords
/// @alias coordinates
@function sg-coords($distance, $angle) {
  @return sg-coordinates($distance, $angle);
}
